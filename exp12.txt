/*A double-ended queue (deque) is a linear list in which additions and deletions may be 
made at either end. Obtain a data representation mapping a deque into a onedimensional array. Write C++ program to simulate deque with functions to add and 
delete elements from either end of the deque*/


#include <iostream>

using namespace std;

const int MAX_SIZE = 10;

class Deque {
private:
    int arr[MAX_SIZE];
    int front, rear;

public:
    Deque() : front(-1), rear(-1) {}

    // Function to check if the deque is empty
    bool isEmpty() {
        return front == -1 && rear == -1;
    }

    // Function to check if the deque is full
    bool isFull() {
        return (front == 0 && rear == MAX_SIZE - 1) || (rear == (front - 1) % (MAX_SIZE - 1));
    }

    // Function to add an element at the front of the deque
    void addFront(int element) {
        if (isFull()) {
            cout << "Deque is full. Cannot add at the front.\n";
            return;
        }

        if (isEmpty()) {
            front = rear = 0;
        } else if (front == 0) {
            front = MAX_SIZE - 1;
        } else {
            front--;
        }

        arr[front] = element;
        cout << "Added " << element << " at the front of the deque.\n";
    }

    // Function to add an element at the rear of the deque
    void addRear(int element) {
        if (isFull()) {
            cout << "Deque is full. Cannot add at the rear.\n";
            return;
        }

        if (isEmpty()) {
            front = rear = 0;
        } else if (rear == MAX_SIZE - 1) {
            rear = 0;
        } else {
            rear++;
        }

        arr[rear] = element;
        cout << "Added " << element << " at the rear of the deque.\n";
    }

    // Function to delete an element from the front of the deque
    void deleteFront() {
        if (isEmpty()) {
            cout << "Deque is empty. Cannot delete from the front.\n";
            return;
        }

        cout << "Deleted " << arr[front] << " from the front of the deque.\n";

        if (front == rear) {
            front = rear = -1; // Reset to empty deque
        } else {
            front = (front + 1) % MAX_SIZE;
        }
    }

    // Function to delete an element from the rear of the deque
    void deleteRear() {
        if (isEmpty()) {
            cout << "Deque is empty. Cannot delete from the rear.\n";
            return;
        }

        cout << "Deleted " << arr[rear] << " from the rear of the deque.\n";

        if (front == rear) {
            front = rear = -1; // Reset to empty deque
        } else if (rear == 0) {
            rear = MAX_SIZE - 1;
        } else {
            rear--;
        }
    }

    // Function to display the elements of the deque
    void displayDeque() {
        if (isEmpty()) {
            cout << "Deque is empty.\n";
            return;
        }

        cout << "Elements of the deque: ";
        int i = front;
        do {
            cout << arr[i] << " ";
            i = (i + 1) % MAX_SIZE;
        } while (i != (rear + 1) % MAX_SIZE);
        cout << endl;
    }
};

int main() {
    Deque deque;

    char choice;
    int element;

    do {
        cout << "\nChoose an option:\n";
        cout << "1. Add element at the front\n";
        cout << "2. Add element at the rear\n";
        cout << "3. Delete element from the front\n";
        cout << "4. Delete element from the rear\n";
        cout << "5. Display deque\n";
        cout << "6. Quit\n";
        cout << "Enter your choice: ";
        cin >> choice;

        switch (choice) {
            case '1':
                cout << "Enter the element to add at the front: ";
                cin >> element;
                deque.addFront(element);
                break;

            case '2':
                cout << "Enter the element to add at the rear: ";
                cin >> element;
                deque.addRear(element);
                break;

            case '3':
                deque.deleteFront();
                break;

            case '4':
                deque.deleteRear();
                break;

            case '5':
                deque.displayDeque();
                break;

            case '6':
                cout << "Exiting the program.\n";
                break;

            default:
                cout << "Invalid choice. Please try again.\n";
        }

    } while (choice != '6');

    return 0;
}
