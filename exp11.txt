/*Queues are frequently used in computer programming, and a typical example is the 
creation of a job queue by an operating system. If the operating system does not use 
priorities, then the jobs are processed in the order they enter the system. Write C++ 
program for simulating job queue. Write functions to add job and delete job from queue.*/



#include <iostream>
#include <queue>

using namespace std;

class JobQueue {
private:
    queue<string> jobs;

public:
    // Function to add a job to the queue
    void addJob(const string& job) {
        jobs.push(job);
        cout << "Job added to the queue: " << job << endl;
    }

    // Function to delete a job from the queue
    void deleteJob() {
        if (!jobs.empty()) {
            cout << "Job deleted from the queue: " << jobs.front() << endl;
            jobs.pop();
        } else {
            cout << "Queue is empty. No job to delete." << endl;
        }
    }

    // Function to display the current jobs in the queue
    void displayQueue() {
        if (!jobs.empty()) {
            cout << "Current Jobs in the Queue: ";
            queue<string> tempQueue = jobs;
            while (!tempQueue.empty()) {
                cout << tempQueue.front() << " ";
                tempQueue.pop();
            }
            cout << endl;
        } else {
            cout << "Queue is empty. No jobs to display." << endl;
        }
    }
};

int main() {
    JobQueue jobQueue;

    char choice;
    string job;

    do {
        cout << "\nChoose an option:\n";
        cout << "1. Add a job\n";
        cout << "2. Delete a job\n";
        cout << "3. Display current jobs\n";
        cout << "4. Quit\n";
        cout << "Enter your choice: ";
        cin >> choice;

        switch (choice) {
            case '1':
                cout << "Enter the job to add: ";
                cin.ignore(); // Clear the newline character from the input buffer
                getline(cin, job);
                jobQueue.addJob(job);
                break;

            case '2':
                jobQueue.deleteJob();
                break;

            case '3':
                jobQueue.displayQueue();
                break;

            case '4':
                cout << "Exiting the program.\n";
                break;

            default:
                cout << "Invalid choice. Please try again.\n";
        }

    } while (choice != '4');

    return 0;
}
